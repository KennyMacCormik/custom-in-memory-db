// Code generated by mockery v2.46.0. DO NOT EDIT.

package storage

import (
	cmd "custom-in-memory-db/internal/server/cmd"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(_a0 error) *MockStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func() error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: key
func (_m *MockStorage) Del(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockStorage_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockStorage_Expecter) Del(key interface{}) *MockStorage_Del_Call {
	return &MockStorage_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockStorage_Del_Call) Run(run func(key string)) *MockStorage_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Del_Call) Return(_a0 error) *MockStorage_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Del_Call) RunAndReturn(run func(string) error) *MockStorage_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockStorage) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockStorage_Expecter) Get(key interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStorage_Get_Call) Run(run func(key string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 string, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(string) (string, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: conf, lg
func (_m *MockStorage) Recover(conf cmd.Config, lg *slog.Logger) error {
	ret := _m.Called(conf, lg)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cmd.Config, *slog.Logger) error); ok {
		r0 = rf(conf, lg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type MockStorage_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - conf cmd.Config
//   - lg *slog.Logger
func (_e *MockStorage_Expecter) Recover(conf interface{}, lg interface{}) *MockStorage_Recover_Call {
	return &MockStorage_Recover_Call{Call: _e.mock.On("Recover", conf, lg)}
}

func (_c *MockStorage_Recover_Call) Run(run func(conf cmd.Config, lg *slog.Logger)) *MockStorage_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cmd.Config), args[1].(*slog.Logger))
	})
	return _c
}

func (_c *MockStorage_Recover_Call) Return(_a0 error) *MockStorage_Recover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Recover_Call) RunAndReturn(run func(cmd.Config, *slog.Logger) error) *MockStorage_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockStorage) Set(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockStorage_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockStorage_Expecter) Set(key interface{}, value interface{}) *MockStorage_Set_Call {
	return &MockStorage_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockStorage_Set_Call) Run(run func(key string, value string)) *MockStorage_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Set_Call) Return(_a0 error) *MockStorage_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Set_Call) RunAndReturn(run func(string, string) error) *MockStorage_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
