// Code generated by mockery v2.46.0. DO NOT EDIT.

package network

import (
	network "custom-in-memory-db/internal/server/network"

	mock "github.com/stretchr/testify/mock"
)

// MockEndpoint is an autogenerated mock type for the Endpoint type
type MockEndpoint struct {
	mock.Mock
}

type MockEndpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndpoint) EXPECT() *MockEndpoint_Expecter {
	return &MockEndpoint_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: f
func (_m *MockEndpoint) Listen(f network.Handler) {
	_m.Called(f)
}

// MockEndpoint_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockEndpoint_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - f network.Handler
func (_e *MockEndpoint_Expecter) Listen(f interface{}) *MockEndpoint_Listen_Call {
	return &MockEndpoint_Listen_Call{Call: _e.mock.On("Listen", f)}
}

func (_c *MockEndpoint_Listen_Call) Run(run func(f network.Handler)) *MockEndpoint_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.Handler))
	})
	return _c
}

func (_c *MockEndpoint_Listen_Call) Return() *MockEndpoint_Listen_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEndpoint_Listen_Call) RunAndReturn(run func(network.Handler)) *MockEndpoint_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEndpoint creates a new instance of MockEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndpoint {
	mock := &MockEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
